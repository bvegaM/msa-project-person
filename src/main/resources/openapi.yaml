openapi: 3.0.3
info:
  title: Swagger Person - OpenAPI 3.0
  description: |-
    <div style="text-align: justify;">
      <h3>Maestría en Software - Diseño de patrones de API</h3>
    
      <img src="https://blogposgrados.ups.edu.ec/hs-fs/hubfs/Logo-Posgrados.png?width=1517&height=262&name=Logo-Posgrados.png" alt="Image" align="right" width="400"/>
    
      <p>This is a contract to manage person data based on the OpenAPI 3.0 specification.This is a contract that uses the API First-Contract principle to standardize the creation of endpoints to be used in our service and improve the development of our APIs.</p> 
    </div>

  termsOfService: http://swagger.io/terms/
  contact:
    email: vegabrya40@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8090/api/v1
  - url: http://localhost:8080/api/v1
tags:
  - name: person
    description: Everything about persons
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /person:
    post:
      tags:
        - person
      summary: create a new person
      description: Create a new person with a Unique ID
      operationId: createPerson
      parameters:
        - name: x-sw-client-request-id
          in: header
          description: Unique ID for the request
          required: true
          schema:
            type: string
        - name: x-sw-client-user-agent
          in: header
          description: Unique ID for the request
          required: true
          schema:
            type: string
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: The server could not understand the request because of incorrect syntax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Person:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Error:
      type: object
      properties:
        title:
          type: string
        detail:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorDetail"
        status:
          type: integer
    ErrorDetail:
      type: object
      properties:
        message:
          type: string